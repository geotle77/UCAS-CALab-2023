diff --git a/dif/EXEstage.v b/dif/EXEstage.v
index e983e1b..846600a 100644
--- a/dif/EXEstage.v
+++ b/dif/EXEstage.v
@@ -237,7 +237,7 @@ assign mem_we=(|es_store_op);
 assign es_mem_we = mem_we & ~es_reflush & ~ms_ex_to_es & ~st_ale;
 assign es_rf_we = es_valid && es_gr_we;
 
-assign data_sram_en    =  ~es_finish && es_need_mem ;//1'b1;
+assign data_sram_en    =  ~es_finish && es_need_mem && ms_allowin;//1'b1;
 assign data_sram_size  = (es_store_op[0] | es_load_op[0] | es_load_op[3]) ? 2'b00   // load b, bu or store b
                        : (es_store_op[1] | es_load_op[1] | es_load_op[4]) ? 2'b01   // load h, hu or store h
                        : 2'b10;
diff --git a/dif/IDstage.v b/dif/IDstage.v
index e234ac8..7a1004c 100644
--- a/dif/IDstage.v
+++ b/dif/IDstage.v
@@ -211,7 +211,7 @@ wire [ 1:0] time_op      ;
 //////////pipeline//////////
 reg [`FS2DS_BUS_LEN-1: 0] fs2ds_bus_reg;
 always @(posedge clk) begin
-    if (reset || br_taken || ds_reflush) begin
+    if (reset || ds_reflush) begin
       ds_valid <= 1'b0;
     end else if (ds_allowin) begin
       ds_valid <= fs2ds_valid;
diff --git a/dif/IFstage.v b/dif/IFstage.v
index 1051dab..3daaa90 100644
--- a/dif/IFstage.v
+++ b/dif/IFstage.v
@@ -36,7 +36,6 @@ wire br_taken;
 wire [31:0] br_target;
 
 reg [31: 0] fs_pc;
-reg [31: 0] pfs_pc;
 wire [31:0] fs_inst;
 
 wire fs_ready_go; 
@@ -60,9 +59,9 @@ always @(posedge clk) begin
 end
 
 assign to_fs_valid = pfs_valid && pfs_ready_go;
-assign pfs_ready_go = inst_sram_en && inst_sram_addr_ok && ~(pfs_reflush | fs_reflush | br_stall);//the addr is accepted then enter IF stage//my
+assign pfs_ready_go = inst_sram_en && inst_sram_addr_ok && ~(pfs_reflush | fs_reflush | br_taken &~br_stall | br_stall);//the addr is accepted then enter IF stage//my
 
-assign inst_sram_en       = fs_allowin & ~br_stall & pfs_valid & ~pfs_reflush; // consider the case if pfs_valid :1 but fs_allowin :0//my
+assign inst_sram_en       = fs_allowin & pfs_valid & ~pfs_reflush; // consider the case if pfs_valid :1 but fs_allowin :0//my
 //simple solution : fs_allowin =1 then inst_sram_en =1 to avoid the pfs_ready_go =1 but fs_allowin =0,which can't keep the inst
 //this method is not good, because it arise more delay
 assign inst_sram_wr       = 1'b0;
@@ -117,7 +116,7 @@ assign fs_inst     = fs_inst_valid ? fs_inst_buf : inst_sram_rdata;//don't need
 assign fs2ds_bus = {fs_exc_data,    //95:64
                     fs_pc,          //63:32
                     fs_inst};          //31:0
-assign fs2ds_valid = fs_valid && fs_ready_go && ~fs_reflush && ~fs_inst_cancel && ~(br_taken & ~br_stall) ;
+assign fs2ds_valid = fs_valid && fs_ready_go && ~fs_inst_cancel ;
 //////////excption information////////
 //exp13
 wire        fs_adef;
@@ -134,7 +133,8 @@ reg [31: 0]fs_ertn_entry;
 reg [31: 0]fs_ex_entry;
 reg fs_br_taken;
 reg [31: 0] fs_br_target;
-assign seq_pc = pfs_pc + 3'h4;
+reg fs_br_stall;
+assign seq_pc = fs_pc + 3'h4;
 assign nextpc  =  wb_ex? csr_ex_entry:   //the nextpc is updated in these cases
                   fs_ex_valid? fs_ex_entry:
                   fs_ertn_valid? fs_ertn_entry:
@@ -170,19 +170,25 @@ always @(posedge clk) begin
   end
 end
 
+
 always @(posedge clk) begin
-  if(~resetn) begin
-    pfs_pc <= 32'h1bfffffc;
-  end
-  else if(pfs_ready_go & fs_allowin) begin//the inst has transfered to the IF stage
-    pfs_pc <= nextpc;
-  end
+    if (~resetn) begin
+        fs_br_stall <= 1'b0;
+    end else if (br_stall) begin
+        fs_br_stall <= br_stall;
+    end 
+    else if (inst_sram_addr_ok && ~pfs_reflush && fs_allowin)begin
+        fs_br_stall <= 1'b0;
+    end
 end
 
 always @(posedge clk) begin
- if(to_fs_valid & fs_allowin) begin //the inst has been accepted by the IF stage
-    fs_pc <= nextpc;
-  end
+    if (~resetn) begin
+        fs_pc <= 32'h1bfffffc;
+    end
+    else if (to_fs_valid & fs_allowin) begin
+        fs_pc <= nextpc;
+    end
 end
 
 
@@ -197,7 +203,7 @@ reg pfs_reflush;
 always @(posedge clk) begin
     if(~resetn)
         pfs_reflush <= 1'b0;
-    else if(inst_sram_en && fs_reflush)
+    else if(inst_sram_en && (fs_reflush | br_taken &~ br_stall | (br_stall | fs_br_stall)&inst_sram_addr_ok))
         pfs_reflush <= 1'b1;
     else if(inst_sram_data_ok)
         pfs_reflush <= 1'b0;
@@ -218,7 +224,7 @@ end
 
 
 wire fs_inst_cancel;
-assign fs_inst_cancel = fs_reflush | fs_reflush_reg;
+assign fs_inst_cancel = fs_reflush | fs_reflush_reg | br_taken & ~br_stall | fs_br_taken;
 
 
 endmodule
diff --git a/dif/MEMstage.v b/dif/MEMstage.v
index 12cb197..2bcbc00 100644
--- a/dif/MEMstage.v
+++ b/dif/MEMstage.v
@@ -79,6 +79,8 @@ assign ms_ready_go = ms_need_mem && data_sram_data_ok ||  ~ms_need_mem;
 assign ms_allowin = ~ms_valid || ms_ready_go && ws_allowin;
 assign ms2ws_valid = ms_valid && ms_ready_go;
 
+wire mem_need_mem;
+assign mem_need_mem = ms_valid && (mem_res_from_mem || mem_we);
 always @(posedge clk) begin
   if (reset) begin
     ms_valid <= 1'b0;
