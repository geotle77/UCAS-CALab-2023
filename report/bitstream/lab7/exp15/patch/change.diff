diff --git a/EXEstage.v b/EXEstage.v
index bd17f89..a0bb370 100644
--- a/EXEstage.v
+++ b/EXEstage.v
@@ -24,7 +24,7 @@ module EXEstage (
 
   output reg es_block,
   output wire es_mem_block,
-  input wire block,
+  input wire mul_block,
   
   output wire [67:0] mul_result,
 
@@ -82,8 +82,33 @@ wire [ 5:0] ds_ecode       ;
 wire [ 5:0] es_ecode       ;
 wire es_res_from_mul        ;
 wire es_res_from_mem        ;
-assign {es_pc,es_res_from_mul, es_alu_src1, es_alu_src2, es_alu_op, es_mul_op,  es_load_op, es_store_op, es_rkd_value, es_gr_we, es_dest, ds_exc_data,es_time_op} = ds2es_bus_reg;
-assign es2ms_bus = {es_mem_we,es_res_from_mem,es_pc,es_res_from_mul,es_mul_op,es_final_result, es_load_op, es_dest, es_gr_we,es_rkd_value,es_exc_data};
+assign {es_pc,
+        es_res_from_mul, 
+        es_alu_src1, 
+        es_alu_src2, 
+        es_alu_op, 
+        es_mul_op,  
+        es_load_op, 
+        es_store_op, 
+        es_rkd_value, 
+        es_gr_we, 
+        es_dest, 
+        ds_exc_data,
+        es_time_op
+        } = ds2es_bus_reg;
+
+assign es2ms_bus = {es_mem_we,
+                    es_res_from_mem,
+                    es_pc,
+                    es_res_from_mul,
+                    es_mul_op,
+                    es_final_result, 
+                    es_load_op, 
+                    es_dest, 
+                    es_gr_we,
+                    es_rkd_value,
+                    es_exc_data};
+
 assign ld_ale  =  es_load_op[1] &es_alu_result[0]                        // inst_ld_h
                 | es_load_op[2] & (es_alu_result[1] |es_alu_result[0])   // inst_ld_w
                 | es_load_op[4] & es_alu_result[0] ;                      // inst_ld_hu
@@ -107,27 +132,27 @@ assign es_wrong_addr = es_adef ? ds_wrong_addr : es_alu_result;
 assign es_ecode   = es_ale ? `ECODE_ALE : ds_ecode;
 assign es_ex      = (ds_ex | es_ale) & es_valid;
 
-assign {es_adef,         // 98
-        ds_wrong_addr,   // 97:66
-        es_csr_re,       // 65
-        es_csr_we,       // 64
-        es_csr_wmask,    // 63:32
-        es_csr_num,      // 31:17
+assign {es_adef,         // 97
+        ds_wrong_addr,   // 96:65
+        es_csr_re,       // 64
+        es_csr_we,       // 63
+        es_csr_wmask,    // 62:31
+        es_csr_num,      // 30:17
         es_ertn_flush,   // 16
         ds_ex,           // 15
         es_esubcode,     // 14:6
         ds_ecode         // 5:0
         } = ds_exc_data;
 
-assign es_exc_data = {es_wrong_addr,         
-                     es_csr_we,                  
-                     es_csr_wmask,                        
-                     es_csr_num,                  
-                     es_ertn_flush,              
-                     es_ex,                       
-                     es_esubcode ,               
-                     es_ecode,
-                     es_csr_re                    
+assign es_exc_data = {es_wrong_addr, //60:91         
+                     es_csr_we,      //59            
+                     es_csr_wmask,   //27:58                     
+                     es_csr_num,     //13:26             
+                     es_ertn_flush,  //12            
+                     es_ex,         // 11             
+                     es_esubcode ,  // 2:10       
+                     es_ecode,      // 6:1
+                     es_csr_re      //0           
                     };
 //////////pipeline////////
 wire es_ready_go;
@@ -155,7 +180,7 @@ end
 
 always @(posedge clk)begin
     if(ds2es_valid && es_allowin)begin
-        if(block)begin
+        if(mul_block)begin
             es_block <= 1'b1;
         end
         else begin
diff --git a/IDstage.v b/IDstage.v
index 22a5b79..e234ac8 100644
--- a/IDstage.v
+++ b/IDstage.v
@@ -19,7 +19,7 @@ module IDstage (
   
   input wire es_block,
   input wire es_mem_block,
-  output wire block,
+  output wire mul_block,
   input wire ms_mem_block,
 
   input wire es_csr_re,
@@ -33,7 +33,10 @@ module IDstage (
 wire br_stall;
 wire br_taken;
 wire [31:0] br_target;
-assign br_zip = {br_stall, br_taken, br_target};
+assign br_zip = {br_stall, //33:33
+                 br_taken, //32:32
+                 br_target //31:0
+                 };
 
 //forward data from exe,mem,wb
 wire rf_we;
@@ -46,8 +49,8 @@ wire [4:0] exe_dest;
 wire [4:0] mem_dest;
 wire [31:0] alu_result;
 wire [31:0] final_result;
-assign {exe_rf_we, exe_dest, alu_result}   = exe_forward_zip;
-assign {mem_rf_we, mem_dest, final_result} = mem_forward_zip;
+assign {exe_rf_we, exe_dest, alu_result}   = exe_forward_zip;//waiting to add the es_mem_block
+assign {mem_rf_we, mem_dest, final_result} = mem_forward_zip;//waiting to add the ms_mem_block
 
 //exception data from fs
 wire [`FS_EXC_DATA_WD-1:0]fs_exc_data;
@@ -69,7 +72,20 @@ wire mem_we;
 wire [4:0] load_op;
 wire [2:0] store_op;
 wire res_from_mul;
-assign ds2es_bus = {ds_pc,res_from_mul, alu_src1, alu_src2, alu_op, mul_op, load_op, store_op, rkd_value, gr_we, dest, ds_exc_data/*98bits*/,time_op};
+assign ds2es_bus = {ds_pc,          //230:261
+                    res_from_mul,   //229:229
+                    alu_src1,       //197:228
+                    alu_src2,       //165:196
+                    alu_op,         //149:164
+                    mul_op,         //146:148
+                    load_op,        //141:145
+                    store_op,       //138:140
+                    rkd_value,      //106:137
+                    gr_we,          //105:105
+                    dest,           //100:104
+                    ds_exc_data,    //2:99
+                    time_op         //1:0
+                    };
 
 //////////declaration////////
 reg ds_valid;
@@ -421,8 +437,6 @@ regfile u_regfile(
     .wdata  (rf_wdata )
     );
 
-//assign rj_value  = rf_rdata1;
-//assign rkd_value = rf_rdata2;
 assign rj_value = 
     (exe_rf_we && exe_dest == rf_raddr1 && |rf_raddr1)? alu_result :
     (mem_rf_we && mem_dest == rf_raddr1 && |rf_raddr1)? final_result :
@@ -458,8 +472,8 @@ assign br_target = (inst_beq || inst_bne || inst_bl || inst_b ||
 assign alu_src1 = src1_is_pc  ? ds_pc[31:0] : rj_value;
 assign alu_src2 = src2_is_imm ? imm : rkd_value;
 
-assign block = (|load_op) || res_from_mul;
-
+assign mul_block = (|load_op) || res_from_mul;
+//------------------exception------------------
 assign ds_ine = ~ ( inst_add_w     | inst_sub_w   | inst_slt     | inst_sltu      |
                  inst_nor       | inst_and     | inst_or      | inst_xor       |   
                  inst_slli_w    | inst_srli_w  | inst_srai_w  | inst_addi_w    | 
@@ -474,8 +488,8 @@ assign ds_ine = ~ ( inst_add_w     | inst_sub_w   | inst_slt     | inst_sltu
                  inst_st_b      | inst_st_h    | inst_csrrd   | inst_csrwr     |
                  inst_csrxchg   | inst_ertn    | inst_syscall | inst_break     |
                  inst_rdcntvl   | inst_rdcntvh | inst_rdcntid );
-assign ds_csr_re    = inst_csrrd | inst_csrwr | inst_csrxchg |inst_rdcntid;//è¯»ä½¿èƒ½ä¿¡ï¿??
-assign ds_csr_we    = inst_csrwr | inst_csrxchg;//å†™ä½¿èƒ½ä¿¡ï¿??
+assign ds_csr_re    = inst_csrrd | inst_csrwr | inst_csrxchg |inst_rdcntid;//
+assign ds_csr_we    = inst_csrwr | inst_csrxchg;//
 assign ds_csr_wmask    = {32{inst_csrxchg}} & rj_value | {32{inst_csrwr}};
 assign csr_wvalue   = rkd_value;
 assign ds_csr_num   = {14{inst_rdcntid}} & `CSR_TID | {14{~inst_rdcntid}} & ds_inst[23:10];
@@ -489,6 +503,16 @@ assign ds_ecode = ds_has_int   ? `ECODE_INT
                 : inst_break   ? `ECODE_BRK
                 : inst_syscall ? `ECODE_SYS : 6'b0;
 assign ds_esubcode = ds_adef ? `ESUBCODE_ADEF : 9'b0;
-assign ds_exc_data = {ds_adef, ds_wrong_addr, ds_csr_re,ds_csr_we, ds_csr_wmask,ds_csr_num, ds_ertn_flush, ds_ex, ds_esubcode, ds_ecode};
+assign ds_exc_data = {ds_adef,      //97:97
+                     ds_wrong_addr, //96:65
+                     ds_csr_re,     //64:64
+                     ds_csr_we,     //63:63
+                     ds_csr_wmask,  //62:31 
+                     ds_csr_num,    //30:17
+                     ds_ertn_flush, //16:16
+                     ds_ex,         //15:15
+                     ds_esubcode,   //14:6
+                     ds_ecode       //5:0
+                     };
 
 endmodule
\ No newline at end of file
diff --git a/IFstage.v b/IFstage.v
index c41106f..1051dab 100644
--- a/IFstage.v
+++ b/IFstage.v
@@ -13,7 +13,7 @@ module IFstage (
     input  wire [31:0] inst_sram_rdata,
     input  wire        inst_sram_addr_ok,
     input  wire        inst_sram_data_ok,
-      //the interface between the IFstage and the IDstage  
+  //the interface between the IFstage and the IDstage  
   input  wire [`BR_BUS-1:0]         br_zip,
   output wire [`FS2DS_BUS_LEN-1:0]  fs2ds_bus,
   input  wire                       ds_allowin,
@@ -42,89 +42,87 @@ wire [31:0] fs_inst;
 wire fs_ready_go; 
 wire fs_allowin; 
 reg fs_valid;
-//exp13
-wire        fs_adef;
-wire [31:0] fs_wrong_addr;
-wire [`FS_EXC_DATA_WD-1:0] fs_exc_data;
 
 assign {br_stall, br_taken, br_target} = br_zip;
 
 //------------------pre-IF stage------------------
+
 reg  pfs_valid;
 wire pfs_ready_go;
 wire to_fs_valid;
 always @(posedge clk) begin
-    if (~resetn  ) begin
-        pfs_valid <= 1'b0;
-    end
-    else begin
-        pfs_valid <= 1'b1;
-    end
+  if (~resetn  ) begin
+    pfs_valid <= 1'b0;
+  end
+  else begin
+    pfs_valid <= 1'b1;
+  end
 end
 
 assign to_fs_valid = pfs_valid && pfs_ready_go;
-assign pfs_ready_go = inst_sram_en && inst_sram_addr_ok;//the addr is accepted then enter IF stage
-
-assign inst_sram_en = fs_allowin & ~br_stall & pfs_valid; // consider the case if pfs_valid :1 but fs_allowin :0
-assign inst_sram_wr = 1'b0;
-assign inst_sram_we  = 4'b0;
-assign inst_sram_size = 2'b10;
-assign inst_sram_wstrb = 4'b0;
-assign inst_sram_wdata = 32'b0;
-assign inst_sram_addr = nextpc;
-
-//////////pre-IF to IF inst buf////////
+assign pfs_ready_go = inst_sram_en && inst_sram_addr_ok && ~(pfs_reflush | fs_reflush | br_stall);//the addr is accepted then enter IF stage//my
+
+assign inst_sram_en       = fs_allowin & ~br_stall & pfs_valid & ~pfs_reflush; // consider the case if pfs_valid :1 but fs_allowin :0//my
+//simple solution : fs_allowin =1 then inst_sram_en =1 to avoid the pfs_ready_go =1 but fs_allowin =0,which can't keep the inst
+//this method is not good, because it arise more delay
+assign inst_sram_wr       = 1'b0;
+assign inst_sram_we       = 4'b0;
+assign inst_sram_size     = 2'b10;
+assign inst_sram_wstrb    = 4'b0;
+assign inst_sram_wdata    = 32'b0;
+assign inst_sram_addr     = nextpc;
+
+////////// IF to ID inst buf////////
 reg [31: 0] fs_inst_buf;
 reg         fs_inst_valid;
-reg         fs_inst_cancel;
-always @(posedge clk) begin
-    if(~resetn)
-        fs_inst_cancel <= 1'b0;
-    else if((fs_reflush | br_taken & ~br_stall) && ~fs_allowin && ~fs_ready_go )//the inst is canceled when the branch is taken or the pipeline is flushed
-        fs_inst_cancel <= 1'b1;
-    else if(inst_sram_data_ok) 
-        fs_inst_cancel <= 1'b0;
-end
+//reg         fs_inst_cancel;
+//always @(posedge clk) begin
+//    if(~resetn)
+//        fs_inst_cancel <= 1'b0;
+//    else if((fs_reflush | br_taken & ~br_stall) && ~fs_allowin && ~fs_ready_go )//the inst is canceled when the branch is taken or the pipeline is flushed
+//        fs_inst_cancel <= 1'b1;
+//    else if(inst_sram_data_ok) 
+//        fs_inst_cancel <= 1'b0;
+//end
 
 always @(posedge clk) begin
     if(~resetn)begin
-        fs_inst_buf <= 32'b0;
+        fs_inst_buf   <= 32'b0;
         fs_inst_valid <= 1'b0;
     end
-    else if(inst_sram_data_ok & ~fs_inst_valid & ~ds_allowin & ~fs_inst_cancel)//this is to get the inst from the sram
+    else if(inst_sram_data_ok & ~fs_inst_valid & ~ds_allowin & ~fs_inst_cancel)//need to store in the buf if ds_allowin = 0 and fs_inst_cancel = 0
     begin
-        fs_inst_buf <= inst_sram_rdata;
+        fs_inst_buf   <= inst_sram_rdata;
         fs_inst_valid <= 1'b1;
     end
-    else if(fs_reflush || ds_allowin) // ds_allowin = 1: inst enters id stage
+    else if(fs_inst_cancel || ds_allowin) // ds_allowin = 1: inst enters id stage//my
     begin
       fs_inst_buf <= 32'b0;
       fs_inst_valid <= 1'b0;
     end
 end
 //------------------IF stage------------------
-
-
-
 assign fs_allowin = ~fs_valid || fs_ready_go && ds_allowin;
-
 always @(posedge clk) begin
   if (~resetn) begin
     fs_valid <= 1'b0;
   end 
   else if (fs_allowin) begin
-    fs_valid <= to_fs_valid;
+    fs_valid <= to_fs_valid & ~fs_reflush;
   end
 end
 
-assign fs_ready_go = fs_valid && inst_sram_data_ok|| fs_inst_valid && ~fs_inst_cancel;
+assign fs_ready_go = fs_valid && inst_sram_data_ok || fs_inst_valid && ~fs_inst_cancel;//consider two cases: 1. the inst is from the sram 2. the inst is from the inst_buf
 assign fs_inst     = fs_inst_valid ? fs_inst_buf : inst_sram_rdata;//don't need to wait the data_ok signal
 assign fs2ds_bus = {fs_exc_data,    //95:64
                     fs_pc,          //63:32
                     fs_inst};          //31:0
 assign fs2ds_valid = fs_valid && fs_ready_go && ~fs_reflush && ~fs_inst_cancel && ~(br_taken & ~br_stall) ;
 //////////excption information////////
-
+//exp13
+wire        fs_adef;
+wire [31:0] fs_wrong_addr;
+wire [`FS_EXC_DATA_WD-1:0] fs_exc_data;
 assign fs_adef = fs_pc[1] | fs_pc[0];
 assign fs_wrong_addr = fs_pc;
 assign fs_exc_data    = {fs_valid & fs_adef, // 32:32
@@ -137,7 +135,7 @@ reg [31: 0]fs_ex_entry;
 reg fs_br_taken;
 reg [31: 0] fs_br_target;
 assign seq_pc = pfs_pc + 3'h4;
-assign nextpc  =  wb_ex? csr_ex_entry:
+assign nextpc  =  wb_ex? csr_ex_entry:   //the nextpc is updated in these cases
                   fs_ex_valid? fs_ex_entry:
                   fs_ertn_valid? fs_ertn_entry:
                   ertn_flush? csr_ertn_entry:
@@ -176,16 +174,51 @@ always @(posedge clk) begin
   if(~resetn) begin
     pfs_pc <= 32'h1bfffffc;
   end
-  else if(pfs_ready_go & fs_allowin) begin
+  else if(pfs_ready_go & fs_allowin) begin//the inst has transfered to the IF stage
     pfs_pc <= nextpc;
   end
 end
 
 always @(posedge clk) begin
- if(to_fs_valid & fs_allowin) begin
+ if(to_fs_valid & fs_allowin) begin //the inst has been accepted by the IF stage
     fs_pc <= nextpc;
   end
 end
 
 
+
+
+
+
+
+//----------add----------
+reg pfs_reflush;
+
+always @(posedge clk) begin
+    if(~resetn)
+        pfs_reflush <= 1'b0;
+    else if(inst_sram_en && fs_reflush)
+        pfs_reflush <= 1'b1;
+    else if(inst_sram_data_ok)
+        pfs_reflush <= 1'b0;
+end
+
+
+
+reg fs_reflush_reg;
+
+always @(posedge clk) begin
+    if(~resetn)
+        fs_reflush_reg <= 1'b0;
+    else if(fs_reflush)
+        fs_reflush_reg <= 1'b1;
+    else if(to_fs_valid & fs_allowin)
+        fs_reflush_reg <= 1'b0;
+end
+
+
+wire fs_inst_cancel;
+assign fs_inst_cancel = fs_reflush | fs_reflush_reg;
+
+
 endmodule
diff --git a/MEMstage.v b/MEMstage.v
index a0b8d0c..2bcbc00 100644
--- a/MEMstage.v
+++ b/MEMstage.v
@@ -38,13 +38,32 @@ wire [31:0] mem_rkd_value;
 wire [`ES_EXC_DATA_WD-1 : 0] mem_exc_data;
 wire mem_res_from_mul;
 reg[`ES2MS_BUS_LEN-1:0] es2ms_bus_reg;
-assign {mem_we,mem_res_from_mem,ms_pc,mem_res_from_mul,mem_mul_op, mem_alu_result, mem_load_op, mem_dest, mem_gr_we,mem_rkd_value,mem_exc_data} = es2ms_bus_reg;
+assign {mem_we,
+        mem_res_from_mem,
+        ms_pc,
+        mem_res_from_mul,
+        mem_mul_op, 
+        mem_alu_result, 
+        mem_load_op, 
+        mem_dest, 
+        mem_gr_we,
+        mem_rkd_value,
+        mem_exc_data
+        } = es2ms_bus_reg;
 
 wire mem_rf_we;
 wire [31:0] mem_final_result;
-assign mem_forward_zip = {mem_rf_we, mem_dest, mem_final_result};
-
-assign ms2ws_bus = {ms_pc, mem_gr_we, mem_dest, mem_final_result, mem_rkd_value,mem_exc_data};
+assign mem_forward_zip = {mem_rf_we, 
+                          mem_dest, 
+                          mem_final_result
+                          };
+
+assign ms2ws_bus = {ms_pc, 
+                    mem_gr_we, 
+                    mem_dest, 
+                    mem_final_result, 
+                    mem_rkd_value,
+                    mem_exc_data};
 //////////declaration//////////
 
 wire [31:0]mem_result;
diff --git a/WBstage.v b/WBstage.v
index 0830027..e8a5200 100644
--- a/WBstage.v
+++ b/WBstage.v
@@ -50,8 +50,26 @@ wire [31: 0]ws_rkd_value;
 wire  [ 7:0] ws_hw_int_in  = 8'b0 ;
 wire         ws_ipi_int_in = 1'b0 ;
 wire  [31:0] ws_coreid_in  = 32'b0;
-assign ws2csr_bus = {ws_csr_re, ws_csr_we, ws_csr_num, ws_csr_wmask, ws_csr_wvalue, ws_pc, ws_ecode, ws_esubcode,ws_ipi_int_in,ws_coreid_in,ws_hw_int_in,ws_wrong_addr};
-assign {ws_pc, ws_gr_we, ws_dest, ws_final_result,ws_rkd_value, ws_exc_data} = ms2ws_bus_reg;
+assign ws2csr_bus = {ws_csr_re, 
+                    ws_csr_we, 
+                    ws_csr_num, 
+                    ws_csr_wmask, 
+                    ws_csr_wvalue, 
+                    ws_pc, 
+                    ws_ecode, 
+                    ws_esubcode,
+                    ws_ipi_int_in,
+                    ws_coreid_in,
+                    ws_hw_int_in,
+                    ws_wrong_addr
+                    };
+assign {ws_pc, 
+        ws_gr_we, 
+        ws_dest, 
+        ws_final_result,
+        ws_rkd_value, 
+        ws_exc_data
+        } = ms2ws_bus_reg;
 //////////declaration////////
 reg ws_valid;
 //////////pipeline//////////
diff --git a/mycpu_top.v b/mycpu_top.v
index 7be1682..3e1998f 100644
--- a/mycpu_top.v
+++ b/mycpu_top.v
@@ -1,225 +1,177 @@
 `include "BUS_LEN.vh"
-module mycpu_top (
-    input  wire        clk,
-    input  wire        resetn,
-    // inst sram interface
-    output wire        inst_sram_req,
-    output wire        inst_sram_wr,
-    output wire [ 1:0] inst_sram_size,
-    output wire [ 3:0] inst_sram_wstrb,
-    output wire [31:0] inst_sram_addr,
-    output wire [31:0] inst_sram_wdata,
-    input  wire [31:0] inst_sram_rdata,
-    input  wire        inst_sram_addr_ok,
-    input  wire        inst_sram_data_ok,
-    // data sram interface
-    output wire        data_sram_req,
-    output wire        data_sram_wr,
-    output wire [ 3:0] data_sram_wstrb,
-    output wire [ 1:0] data_sram_size,
-    output wire [31:0] data_sram_addr,
-    output wire [31:0] data_sram_wdata,
-    input  wire [31:0] data_sram_rdata,
-    input  wire        data_sram_addr_ok,
-    input  wire        data_sram_data_ok,
+module mycpu_top(
+    input         aclk   ,
+    input         aresetn,
+ 
+    // ar 
+    output [ 3:0] arid   , // master -> slave
+    output [31:0] araddr , // master -> slave
+    output [ 7:0] arlen  , // master -> slave, 8'b0
+    output [ 2:0] arsize , // master -> slave
+    output [ 1:0] arburst, // master -> slave, 2'b1
+    output [ 1:0] arlock , // master -> slave, 2'b0
+    output [ 3:0] arcache, // master -> slave, 4'b0
+    output [ 2:0] arprot , // master -> slave, 3'b0
+    output        arvalid, // master -> slave
+    input         arready, // slave  -> master
+
+    // r
+    input  [ 3:0] rid    , // slave  -> master
+    input  [31:0] rdata  , // slave  -> master
+    input  [ 1:0] rresp  , // slave  -> master, ignore
+    input         rlast  , // slave  -> master, ignore
+    input         rvalid , // slave  -> master
+    output        rready , // master -> slave
+
+    // aw
+    output [ 3:0] awid   , // master -> slave, 4'b1
+    output [31:0] awaddr , // master -> slave
+    output [ 7:0] awlen  , // master -> slave, 8'b0
+    output [ 2:0] awsize , // master -> slave
+    output [ 1:0] awburst, // master -> slave, 2'b1
+    output [ 1:0] awlock , // master -> slave, 2'b0
+    output [ 3:0] awcache, // master -> slave, 4'b0
+    output [ 2:0] awprot , // master -> slave, 3'b0
+    output        awvalid, // master -> slave
+    input         awready, // slave  -> master
+
+    // w
+    output [ 3:0] wid    , // master -> slave, 4'b1
+    output [31:0] wdata  , // master -> slave
+    output [ 3:0] wstrb  , // master -> slave
+    output        wlast  , // master -> slave, 1'b1
+    output        wvalid , // master -> slave
+    input         wready , // slave  -> master
+
+    // b
+    input  [ 3:0] bid    , // slave  -> master, ignore
+    input  [ 1:0] bresp  , // slave  -> master, ignore
+    input         bvalid , // slave  -> master
+    output        bready , // master -> slave
+    
     // trace debug interface
-    output wire [31:0] debug_wb_pc,
-    output wire [ 3:0] debug_wb_rf_we,
-    output wire [ 4:0] debug_wb_rf_wnum,
-    output wire [31:0] debug_wb_rf_wdata
+    output [31:0] debug_wb_pc      ,
+    output [ 3:0] debug_wb_rf_we  ,
+    output [ 4:0] debug_wb_rf_wnum ,
+    output [31:0] debug_wb_rf_wdata
 );
 
-reg         reset;
-always @(posedge clk) reset <= ~resetn;
-
-
-//wire fs_allowin;
-wire ds_allowin;
-wire es_allowin;
-wire ms_allowin;
-wire ws_allowin;
-wire fs2ds_valid;
-wire ds2es_valid;
-wire es2ms_valid;
-wire ms2ws_valid;
-
-wire [`FORWARD_BUS_LEN-1:0] exe_forward_zip;
-wire [`FORWARD_BUS_LEN-1:0] mem_forward_zip;
-wire [`BR_BUS-1:0] br_zip;
-wire [`WB_RF_BUS-1:0] rf_zip;
-
-wire es_block;
-wire es_mem_block;
-wire ms_mem_block;
-wire block;
-
-wire [`FS2DS_BUS_LEN-1:0]   fs2ds_bus;
-wire [`DS2ES_BUS_LEN-1:0]   ds2es_bus;
-wire [`ES2MS_BUS_LEN-1:0]   es2ms_bus;
-wire [`MS2WS_BUS_LEN-1:0]   ms2ws_bus;
-wire [`WS2CSR_BUS_LEN-1 : 0] ws2csr_bus;
-
-wire [67:0] mul_result;
-
-wire [31:0] csr_ex_entry;
-wire [31:0] csr_ertn_entry;
-wire [31:0]csr_rvalue;
-wire        ertn_flush;
-wire        ms_ex;
-wire        wb_ex;
-
-wire ms_csr_re;
-wire es_csr_re;
-wire ds_has_int;
-wire ws_reflush;
-wire ms_ex_to_es;
-wire csr_has_int;
-IFstage my_if (
-  .clk              (clk),
-  .resetn           (resetn),
+// inst sram interface    
+wire        inst_sram_req    ;
+wire        inst_sram_wr     ;
+wire [ 1:0] inst_sram_size   ;
+wire [ 3:0] inst_sram_wstrb  ;
+wire [31:0] inst_sram_addr   ;
+wire [31:0] inst_sram_wdata  ;
+wire [31:0] inst_sram_rdata  ;
+wire        inst_sram_addr_ok;
+wire        inst_sram_data_ok;
+
+// data sram interface
+wire        data_sram_req    ;
+wire        data_sram_wr     ;
+wire [ 3:0] data_sram_wstrb  ;
+wire [ 1:0] data_sram_size   ;
+wire [31:0] data_sram_addr   ;
+wire [31:0] data_sram_wdata  ;
+wire [31:0] data_sram_rdata  ;
+wire        data_sram_addr_ok;
+wire        data_sram_data_ok;
+
+mycpu_core u_mycpu_core(
+    .clk               (aclk             ),
+    .resetn            (aresetn          ),
   
-  .inst_sram_en     (inst_sram_req    ),
-  .inst_sram_wr     (inst_sram_wr     ),
-  .inst_sram_we     (inst_sram_wstrb  ),
-  .inst_sram_size   (inst_sram_size   ),
-  .inst_sram_addr   (inst_sram_addr   ),
-  .inst_sram_wdata  (inst_sram_wdata  ),
-  .inst_sram_rdata  (inst_sram_rdata  ),
-  .inst_sram_addr_ok(inst_sram_addr_ok),
-  .inst_sram_data_ok(inst_sram_data_ok),
-  
-  .br_zip           (br_zip),
-  .fs2ds_bus        (fs2ds_bus),
-  .ds_allowin       (ds_allowin),
-  .fs2ds_valid      (fs2ds_valid),
-  
-  .csr_ex_entry     (csr_ex_entry  ),
-  .csr_ertn_entry   (csr_ertn_entry),
-  .ertn_flush       (ertn_flush),
-  .wb_ex            (wb_ex     ),
-
-  .fs_reflush       (ws_reflush)
+    .inst_sram_req     (inst_sram_req    ),
+    .inst_sram_wr      (inst_sram_wr     ),
+    .inst_sram_size    (inst_sram_size   ),
+    .inst_sram_wstrb   (inst_sram_wstrb  ),
+    .inst_sram_addr    (inst_sram_addr   ),
+    .inst_sram_wdata   (inst_sram_wdata  ),
+    .inst_sram_rdata   (inst_sram_rdata  ),
+    .inst_sram_addr_ok (inst_sram_addr_ok),
+    .inst_sram_data_ok (inst_sram_data_ok),
+    
+    .data_sram_req     (data_sram_req    ),
+    .data_sram_wr      (data_sram_wr     ),
+    .data_sram_wstrb   (data_sram_wstrb  ),
+    .data_sram_size    (data_sram_size   ),
+    .data_sram_addr    (data_sram_addr   ),
+    .data_sram_wdata   (data_sram_wdata  ),
+    .data_sram_rdata   (data_sram_rdata  ),
+    .data_sram_addr_ok (data_sram_addr_ok),
+    .data_sram_data_ok (data_sram_data_ok),
+     
+    .debug_wb_pc       (debug_wb_pc      ),
+    .debug_wb_rf_we   (debug_wb_rf_we  ),
+    .debug_wb_rf_wnum  (debug_wb_rf_wnum ),
+    .debug_wb_rf_wdata (debug_wb_rf_wdata)
 );
 
-IDstage my_id (
-  .clk              (clk),
-  .reset            (reset),
-  
-  .es_allowin       (es_allowin),
-  .ds_allowin       (ds_allowin),
-  .fs2ds_valid      (fs2ds_valid),
-  .ds2es_valid      (ds2es_valid),
-
-  .br_zip           (br_zip),
-  .ds2es_bus        (ds2es_bus),
-  .fs2ds_bus        (fs2ds_bus),
-
-  .mem_forward_zip  (mem_forward_zip),
-  .exe_forward_zip  (exe_forward_zip),
-  .rf_zip           (rf_zip),
-
-  .es_block         (es_block),
-  .es_mem_block     (es_mem_block),
-  .ms_mem_block     (ms_mem_block),
-  .block            (block),
-
-  .ms_csr_re        (ms_csr_re),
-  .es_csr_re        (es_csr_re),
-  .ds_has_int       (csr_has_int),
-  .ds_reflush       (ws_reflush)
+transfer_bridge u_transfer_bridge(
+    .clk               (aclk             ),
+    .resetn            (aresetn          ),
+
+    .arid              (arid             ),
+    .araddr            (araddr           ),
+    .arlen             (arlen            ),
+    .arsize            (arsize           ),
+    .arburst           (arburst          ),
+    .arlock            (arlock           ),
+    .arcache           (arcache          ),
+    .arprot            (arprot           ),
+    .arvalid           (arvalid          ),
+    .arready           (arready          ),
+
+    .rid               (rid              ),
+    .rdata             (rdata            ),
+    .rresp             (rresp            ),
+    .rlast             (rlast            ),
+    .rvalid            (rvalid           ),
+    .rready            (rready           ),
+
+    .awid              (awid             ),
+    .awaddr            (awaddr           ),
+    .awlen             (awlen            ),
+    .awsize            (awsize           ),
+    .awburst           (awburst          ),
+    .awlock            (awlock           ),
+    .awcache           (awcache          ),
+    .awprot            (awprot           ),
+    .awvalid           (awvalid          ),
+    .awready           (awready          ),
+
+    .wid               (wid              ),
+    .wdata             (wdata            ),
+    .wstrb             (wstrb            ),
+    .wlast             (wlast            ),
+    .wvalid            (wvalid           ),
+    .wready            (wready           ),
+
+    .bid               (bid              ),
+    .bresp             (bresp            ),
+    .bvalid            (bvalid           ),
+    .bready            (bready           ),
+
+    .inst_sram_en     (inst_sram_req    ),
+    .inst_sram_wr      (inst_sram_wr     ),
+    .inst_sram_size    (inst_sram_size   ),
+    .inst_sram_wstrb   (inst_sram_wstrb  ),
+    .inst_sram_addr    (inst_sram_addr   ),
+    .inst_sram_wdata   (inst_sram_wdata  ),
+    .inst_sram_rdata   (inst_sram_rdata  ),
+    .inst_sram_addr_ok (inst_sram_addr_ok),
+    .inst_sram_data_ok (inst_sram_data_ok),
+
+    .data_sram_en     (data_sram_req    ),
+    .data_sram_wr      (data_sram_wr     ),
+    .data_sram_wstrb   (data_sram_wstrb  ),
+    .data_sram_size    (data_sram_size   ),
+    .data_sram_addr    (data_sram_addr   ),
+    .data_sram_wdata   (data_sram_wdata  ),
+    .data_sram_rdata   (data_sram_rdata  ),
+    .data_sram_addr_ok (data_sram_addr_ok),
+    .data_sram_data_ok (data_sram_data_ok)
 );
 
-EXEstage my_exe (
-  .clk              (clk),
-  .resetn           (resetn),
-  .reset            (reset),
-  
-  .ms_allowin       (ms_allowin),
-  .es_allowin       (es_allowin),
-  .ds2es_valid      (ds2es_valid),
-  .es2ms_valid      (es2ms_valid),
-  
-  .ds2es_bus        (ds2es_bus),
-  .es2ms_bus        (es2ms_bus),
-
-  .data_sram_en     (data_sram_req    ),
-  .data_sram_wr     (data_sram_wr     ),
-  .data_sram_we     (data_sram_wstrb  ),     
-  .data_sram_size   (data_sram_size   ),
-  .data_sram_addr   (data_sram_addr   ),
-  .data_sram_wdata  (data_sram_wdata  ),
-  .data_sram_addr_ok(data_sram_addr_ok),
-
-  .exe_forward_zip  (exe_forward_zip),
-
-  .es_block         (es_block),
-  .es_mem_block     (es_mem_block),
-  .block            (block),
-
-  .mul_result       (mul_result),
-
-  .ms_ex_to_es      (ms_ex_to_es),
-  .es_csr_re        (es_csr_re),
-  .es_reflush       (ws_reflush)
-);
-
-MEMstage my_mem (
-  .clk              (clk),
-  .resetn           (resetn),
-  .reset            (reset),
-
-  .data_sram_rdata (data_sram_rdata ),
-  .data_sram_data_ok(data_sram_data_ok),
-  
-  .ws_allowin       (ws_allowin),
-  .ms_allowin       (ms_allowin),
-  .es2ms_valid      (es2ms_valid),
-  .ms2ws_valid      (ms2ws_valid),
-  
-  .es2ms_bus        (es2ms_bus),
-  .ms2ws_bus        (ms2ws_bus),
-  .mem_forward_zip  (mem_forward_zip),
-
-  .mul_result       (mul_result),
-  .ms_mem_block     (ms_mem_block),
-  .ms_ex_to_es      (ms_ex_to_es),
-  .ms_reflush       (ws_reflush),
-  .ms_csr_re        (ms_csr_re)
-);
-
-WBstage my_wb (
-  .clk              (clk),
-  .resetn           (resetn),
-  .reset            (reset),
-  
-  .ws_allowin       (ws_allowin),
-  .ms2ws_valid      (ms2ws_valid),
-  
-  .ms2ws_bus        (ms2ws_bus),
-  .rf_zip           (rf_zip),
-
-  .debug_wb_pc      (debug_wb_pc),
-  .debug_wb_rf_we   (debug_wb_rf_we),
-  .debug_wb_rf_wnum (debug_wb_rf_wnum),
-  .debug_wb_rf_wdata(debug_wb_rf_wdata),
-
-  .csr_rvalue       (csr_rvalue),
-  .ws_ertn_flush       (ertn_flush),
-  .ws_reflush       (ws_reflush),
-  .ws_ex            (wb_ex),
-  .ws2csr_bus       (ws2csr_bus)
-);
-
-  csr u_csr(
-    .clk            (clk       ),
-    .reset          (reset   ),
-    .csr_rvalue     (csr_rvalue),
-    .ex_entry       (csr_ex_entry  ),
-    .ertn_entry     (csr_ertn_entry),
-    .ertn_flush     (ertn_flush),
-    .wb_ex          (wb_ex     ),
-    .ws2csr_bus     (ws2csr_bus),
-    .has_int        (csr_has_int) 
-    );
-
 endmodule
\ No newline at end of file
